import React, { useState } from 'react';
import { downloadFile } from '../utils/fileUtils';

const Emergency = () => {
  const [stressLevel, setStressLevel] = useState(0);

  const stressLevels = [
    { id: 1, label: 'Fine', emoji: '😌', color: 'green' },
    { id: 2, label: 'Stressed', emoji: '😰', color: 'yellow' },
    { id: 3, label: 'Overwhelmed', emoji: '😵', color: 'orange' },
    { id: 4, label: 'Burning Out', emoji: '🤯', color: 'red' }
  ];

  const getStressResponse = (level) => {
    switch(level) {
      case 1:
        return {
          title: "You're doing great! 🌟",
          message: "Since you're feeling good, this is a perfect time to:",
          actions: [
            "Review your upcoming commitments and say no to anything non-essential",
            "Set up systems to prevent future overwhelm",
            "Schedule some buffer time in your calendar",
            "Practice saying no to lower-stakes requests to build the habit"
          ],
          color: "green"
        };
      case 2:
        return {
          title: "Let's address this before it gets worse 🚧",
          message: "You're in the yellow zone. Time for some quick interventions:",
          actions: [
            "Identify your top 3 priorities for this week",
            "Cancel or postpone 1-2 non-essential commitments",
            "Ask for help on your biggest current stressor",
            "Take a 15-minute break right now to reset"
          ],
          color: "yellow"
        };
      case 3:
        return {
          title: "Emergency brake time! 🛑",
          message: "You need immediate relief. Take these steps now:",
          actions: [
            "Stop taking on ANY new commitments this week",
            "Send one email declining a future request",
            "Delegate or postpone 2-3 current tasks",
            "Schedule a longer break (2+ hours) within the next 2 days"
          ],
          color: "orange"
        };
      case 4:
        return {
          title: "This is serious - please get help 🆘",
          message: "Burnout is a real health concern. You need to act immediately:",
          actions: [
            "Call in sick or take a mental health day if possible",
            "Cancel all non-essential commitments for the next week",
            "Reach out to your manager or HR about workload concerns",
            "Consider talking to a mental health professional",
            "Ask family/friends to help with personal responsibilities"
          ],
          color: "red"
        };
      default:
        return null;
    }
  };

  const emergencyScripts = [
    {
      title: "📧 Email Template - Declining New Requests",
      script: "Thank you for thinking of me for [opportunity]. I'm currently at capacity and want to ensure I can give quality attention to my existing commitments. I won't be able to take this on, but I appreciate you considering me."
    },
    {
      title: "💬 Conversation Starter - Manager Check-in",
      script: "I'd like to schedule a brief meeting to discuss my current workload and priorities. I want to ensure I'm focusing on the most important projects and delivering quality work."
    },
    {
      title: "🤝 Delegation Request",
      script: "I'm managing several high-priority projects right now. Would it be possible for someone else to handle [specific task]? I can provide a full briefing to ensure a smooth handoff."
    },
    {
      title: "⏰ Boundary Setting - Meetings",
      script: "I'm in a focused work period right now. Can we schedule this for [specific time] instead? I want to give this conversation the attention it deserves."
    }
  ];

  const saveEmergencyPlan = () => {
    const stressText = stressLevel > 0 ? stressLevels.find(s => s.id === stressLevel)?.label : 'Not assessed';
    const response = getStressResponse(stressLevel);
    
    const content = `EMERGENCY BRAKE PROTOCOL
Generated: ${new Date().toLocaleDateString()}

STRESS LEVEL: ${stressText} ${stressLevel > 0 ? stressLevels.find(s => s.id === stressLevel)?.emoji : ''}

${response ? `
IMMEDIATE ACTION PLAN: ${response.title}
${response.message}

ACTION STEPS:
${response.actions.map((action, index) => `${index + 1}. ${action}`).join('\n')}
` : ''}

EMERGENCY SCRIPTS:
${emergencyScripts.map(script => `
${script.title}
"${script.script}"
`).join('\n')}

QUICK COMMITMENT AUDIT:
- Must Do: What happens if I don't do this?
- Should Do: What can I delegate or postpone?  
- Could Do: What can I drop completely?

Generated by Time Management Toolkit`;

    downloadFile('emergency-action-plan.txt', content);
  };

  const copyScript = async (script) => {
    try {
      await navigator.clipboard.writeText(script);
      alert('Script copied to clipboard!');
    } catch (err) {
      alert('Failed to copy to clipboard');
    }
  };

  const response = getStressResponse(stressLevel);

  return (
    <div className="space-y-8">
      {/* Emergency Header */}
      <div className="bg-red-600 text-white rounded-xl p-8 text-center">
        <h2 className="text-3xl font-bold mb-4">⚠️ Emergency Brake Protocol</h2>
        <p className="text-xl mb-6">When you're overwhelmed and need immediate relief</p>
        
        <p className="text-lg mb-6">How stressed are you right now?</p>
        <div className="flex flex-wrap justify-center gap-3">
          {stressLevels.map((level) => (
            <button
              key={level.id}
              onClick={() => setStressLevel(level.id)}
              className={`px-6 py-3 rounded-lg font-medium transition-all ${
                stressLevel === level.id 
                  ? 'bg-white text-red-600' 
                  : 'border-2 border-white text-white hover:bg-white hover:text-red-600'
              }`}
            >
              {level.emoji} {level.label}
            </button>
          ))}
        </div>
      </div>

      {/* Stress Response */}
      {response && (
        <div className={`rounded-xl p-6 border-2 ${
          response.color === 'green' ? 'bg-green-50 border-green-200' :
          response.color === 'yellow' ? 'bg-yellow-50 border-yellow-200' :
          response.color === 'orange' ? 'bg-orange-50 border-orange-200' :
          'bg-red-50 border-red-200'
        }`}>
          <h3 className={`text-2xl font-bold mb-4 ${
            response.color === 'green' ? 'text-green-800' :
            response.color === 'yellow' ? 'text-yellow-800' :
            response.color === 'orange' ? 'text-orange-800' :
            'text-red-800'
          }`}>
            {response.title}
          </h3>
          <p className={`text-lg mb-6 ${
            response.color === 'green' ? 'text-green-700' :
            response.color === 'yellow' ? 'text-yellow-700' :
            response.color === 'orange' ? 'text-orange-700' :
            'text-red-700'
          }`}>
            {response.message}
          </p>
          <div className={`${
            response.color === 'green' ? 'text-green-700' :
            response.color === 'yellow' ? 'text-yellow-700' :
            response.color === 'orange' ? 'text-orange-700' :
            'text-red-700'
          }`}>
            <h4 className="font-semibold mb-3">Action Steps:</h4>
            <ul className="space-y-2">
              {response.actions.map((action, index) => (
                <li key={index} className="flex items-start">
                  <span className="mr-3">☐</span>
                  <span>{action}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}

      {/* Emergency Scripts */}
      <div>
        <h3 className="text-xl font-semibold mb-6">📝 Emergency Scripts</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {emergencyScripts.map((item, index) => (
            <div key={index} className="bg-white border-l-4 border-blue-400 rounded-lg p-6 shadow-sm">
              <h4 className="text-lg font-semibold text-gray-900 mb-3">{item.title}</h4>
              <p className="text-gray-700 italic mb-4 bg-gray-50 p-4 rounded border">
                "{item.script}"
              </p>
              <button
                onClick={() => copyScript(item.script)}
                className="text-sm text-blue-600 hover:text-blue-800 font-medium"
              >
                📋 Copy to clipboard
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Quick Commitment Audit */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-6">
        <h3 className="text-xl font-semibold text-yellow-800 mb-4">🔍 Quick Commitment Audit</h3>
        <div className="space-y-4">
          <div className="bg-white rounded-lg p-4">
            <h4 className="font-semibold text-gray-900 mb-2">🔥 Must Do</h4>
            <p className="text-gray-700">What happens if I don't do this? (Real consequences)</p>
          </div>
          <div className="bg-white rounded-lg p-4">
            <h4 className="font-semibold text-gray-900 mb-2">⚠️ Should Do</h4>
            <p className="text-gray-700">What can I delegate or postpone? (Important but flexible)</p>
          </div>
          <div className="bg-white rounded-lg p-4">
            <h4 className="font-semibold text-gray-900 mb-2">💭 Could Do</h4>
            <p className="text-gray-700">What can I drop completely? (Nice to have but not essential)</p>
          </div>
        </div>
      </div>

      {/* Save Button */}
      <div className="text-center">
        <button
          onClick={saveEmergencyPlan}
          className="px-8 py-4 bg-gradient-to-r from-cyan-400 to-blue-500 text-white rounded-lg font-medium hover:shadow-lg transition-all text-lg"
        >
          💾 Save Emergency Action Plan
        </button>
      </div>

      {/* Important Note */}
      <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
        <h4 className="text-lg font-semibold text-blue-800 mb-3">🩺 Important Note</h4>
        <p className="text-blue-700">
          If you're consistently feeling overwhelmed or showing signs of burnout, please consider reaching out to:
        </p>
        <ul className="text-blue-700 mt-3 space-y-1">
          <li>• Your manager or HR department</li>
          <li>• A mental health professional</li>
          <li>• Your company's Employee Assistance Program (EAP)</li>
          <li>• Trusted friends or family members</li>
        </ul>
        <p className="text-blue-700 mt-3 font-medium">
          Your wellbeing is more important than any deadline or commitment. 💙
        </p>
      </div>
    </div>
  );
};

export default Emergency;