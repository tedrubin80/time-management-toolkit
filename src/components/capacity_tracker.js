import React, { useState } from 'react';
import { downloadFile } from '../utils/fileUtils';

const CapacityTracker = () => {
  const [tasks, setTasks] = useState([]);
  const [taskInput, setTaskInput] = useState('');
  const [effortLevel, setEffortLevel] = useState(25);

  const currentCapacity = tasks.reduce((sum, task) => sum + task.effort, 0);

  const addTask = () => {
    if (taskInput.trim() === '') return;

    const newTask = {
      id: Date.now(),
      name: taskInput,
      effort: effortLevel
    };

    setTasks([...tasks, newTask]);
    setTaskInput('');
  };

  const removeTask = (taskId) => {
    setTasks(tasks.filter(task => task.id !== taskId));
  };

  const getCapacityStatus = () => {
    if (currentCapacity <= 70) {
      return { text: "You're in the green zone! 💚", color: "text-green-600", bgColor: "bg-green-50" };
    } else if (currentCapacity <= 90) {
      return { text: "Yellow zone - getting full! 🟡", color: "text-yellow-600", bgColor: "bg-yellow-50" };
    } else {
      return { text: "Red zone - time to say no! 🔴", color: "text-red-600", bgColor: "bg-red-50" };
    }
  };

  const saveData = () => {
    const content = `TIME MANAGEMENT TOOLKIT - CAPACITY TRACKER
Generated: ${new Date().toLocaleDateString()}

CURRENT CAPACITY: ${currentCapacity}%

TASKS ON YOUR PLATE:
${tasks.map((task, index) => `${index + 1}. ${task.name} (${task.effort}% capacity)`).join('\n')}

TOTAL TASKS: ${tasks.length}

CAPACITY STATUS:
${currentCapacity <= 70 ? '✅ GREEN ZONE - Room for more commitments' : 
  currentCapacity <= 90 ? '⚠️ YELLOW ZONE - Getting full, be selective' : 
  '🚨 RED ZONE - Time to say no or delegate!'}

RECOMMENDATIONS:
- Keep tracking your capacity before taking on new commitments
- Use the "Saying No" phrases when you're in yellow/red zones
- Review and adjust your task estimates regularly
- Remember: saying no to less important things means saying yes to what matters most

Generated by Time Management Toolkit`;

    downloadFile('time-management-capacity.txt', content);
  };

  const status = getCapacityStatus();

  return (
    <div className="space-y-8">
      <div>
        <h2 className="text-3xl font-bold text-gray-900 mb-4">📊 Workload Capacity Manager</h2>
        <p className="text-lg text-gray-600">Track what's on your plate and visualize when you're at your limit.</p>
      </div>

      {/* Capacity Display */}
      <div className={`${status.bgColor} rounded-xl p-6`}>
        <h3 className="text-xl font-semibold mb-4">🔋 Current Capacity</h3>
        <div className="bg-gray-200 rounded-full h-10 overflow-hidden">
          <div 
            className="h-full bg-gradient-to-r from-green-500 via-yellow-500 to-red-500 rounded-full flex items-center justify-center text-white font-bold transition-all duration-500"
            style={{ width: `${Math.min(currentCapacity, 100)}%` }}
          >
            {currentCapacity}%
          </div>
        </div>
        <p className={`mt-3 font-medium ${status.color}`}>✓ {status.text}</p>
      </div>

      {/* Add Task Form */}
      <div className="bg-gray-50 rounded-xl p-6">
        <div className="flex flex-wrap gap-4">
          <div className="flex-1 min-w-64">
            <input
              type="text"
              value={taskInput}
              onChange={(e) => setTaskInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && addTask()}
              placeholder="What task or commitment do you need to add?"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div>
            <select
              value={effortLevel}
              onChange={(e) => setEffortLevel(Number(e.target.value))}
              className="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value={10}>Small (10%)</option>
              <option value={25}>Medium (25%)</option>
              <option value={40}>Large (40%)</option>
              <option value={60}>Huge (60%)</option>
            </select>
          </div>
          <button
            onClick={addTask}
            className="px-6 py-3 bg-gradient-to-r from-cyan-400 to-blue-500 text-white rounded-lg font-medium hover:shadow-lg transition-all"
          >
            ➕ Add
          </button>
          <button
            onClick={saveData}
            className="px-6 py-3 border border-blue-500 text-blue-500 rounded-lg font-medium hover:bg-blue-50 transition-all"
          >
            💾 Save
          </button>
        </div>
      </div>

      {/* Task List */}
      <div className="space-y-4">
        {tasks.length === 0 ? (
          <div className="text-center py-12 text-gray-500">
            <div className="text-6xl mb-4">📥</div>
            <p className="text-lg">No tasks added yet. Add your first task above!</p>
          </div>
        ) : (
          tasks.map(task => {
            const borderColor = task.effort >= 40 ? 'border-red-400' : task.effort >= 25 ? 'border-yellow-400' : 'border-blue-400';
            return (
              <div key={task.id} className={`bg-white border-l-4 ${borderColor} rounded-lg p-6 shadow-sm flex justify-between items-center`}>
                <div>
                  <h4 className="text-lg font-medium text-gray-900">{task.name}</h4>
                  <span className="inline-block bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm font-medium mt-2">
                    {task.effort}% capacity
                  </span>
                </div>
                <button
                  onClick={() => removeTask(task.id)}
                  className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-full transition-colors"
                >
                  ❌
                </button>
              </div>
            );
          })
        )}
      </div>

      {/* Tips */}
      <div className="bg-orange-50 border border-orange-200 rounded-xl p-6">
        <h4 className="text-lg font-semibold text-orange-800 mb-3">💡 Capacity Tips</h4>
        <ul className="space-y-2 text-orange-700">
          <li><strong>Green (0-70%):</strong> You have room for new commitments</li>
          <li><strong>Yellow (71-90%):</strong> Proceed with caution - you're getting full</li>
          <li><strong>Red (91%+):</strong> STOP! Time to say no or delegate</li>
        </ul>
      </div>
    </div>
  );
};

export default CapacityTracker;