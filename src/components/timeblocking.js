import React, { useState } from 'react';
import { downloadFile } from '../utils/fileUtils';

const TimeBlocking = () => {
  const [answers, setAnswers] = useState({});

  const questions = [
    {
      id: 1,
      question: "How specific are your time blocks?",
      options: [
        { score: 0, text: "Generic blocks like 'Work' or 'Meetings'", icon: "‚ùå" },
        { score: 1, text: "Mix of specific and generic blocks", icon: "‚ö†Ô∏è" },
        { score: 2, text: "Specific blocks like 'Email responses' or 'Project X review'", icon: "‚úÖ" }
      ]
    },
    {
      id: 2,
      question: "Do you have buffer time between different types of work?",
      options: [
        { score: 0, text: "Back-to-back scheduling, no breaks", icon: "‚ùå" },
        { score: 1, text: "Some buffer time, but often run over", icon: "‚ö†Ô∏è" },
        { score: 2, text: "10-15 minute buffers between different task types", icon: "‚úÖ" }
      ]
    },
    {
      id: 3,
      question: "Do you batch similar tasks together?",
      options: [
        { score: 0, text: "Tasks scattered throughout the day", icon: "‚ùå" },
        { score: 1, text: "Sometimes group similar tasks", icon: "‚ö†Ô∏è" },
        { score: 2, text: "Dedicated blocks for emails, calls, deep work, etc.", icon: "‚úÖ" }
      ]
    },
    {
      id: 4,
      question: "How well do you protect your blocked time?",
      options: [
        { score: 0, text: "Others often schedule over my planned work", icon: "‚ùå" },
        { score: 1, text: "Sometimes get interrupted but try to reschedule", icon: "‚ö†Ô∏è" },
        { score: 2, text: "Treat time blocks as unmovable appointments", icon: "‚úÖ" }
      ]
    },
    {
      id: 5,
      question: "How realistic are your time estimates?",
      options: [
        { score: 0, text: "Consistently run over my blocked times", icon: "‚ùå" },
        { score: 1, text: "Sometimes accurate, sometimes not", icon: "‚ö†Ô∏è" },
        { score: 2, text: "Usually finish within my blocked time", icon: "‚úÖ" }
      ]
    }
  ];

  const selectAnswer = (questionId, score) => {
    setAnswers(prev => ({
      ...prev,
      [questionId]: score
    }));
  };

  const totalScore = Object.values(answers).reduce((sum, score) => sum + score, 0);
  const isComplete = Object.keys(answers).length === questions.length;

  const getScoreAssessment = () => {
    if (totalScore <= 3) {
      return {
        title: "üö® NEEDS WORK",
        color: "red",
        recommendations: [
          "Make blocks more specific",
          "Add 15-minute buffers",
          "Batch similar tasks",
          "Treat blocks as unmovable appointments"
        ]
      };
    } else if (totalScore <= 6) {
      return {
        title: "‚ö†Ô∏è GOOD FOUNDATION",
        color: "yellow",
        recommendations: [
          "Be more consistent with successful habits",
          "Fine-tune time estimates",
          "Protect focus blocks more aggressively"
        ]
      };
    } else {
      return {
        title: "üéØ EXCELLENT SYSTEM",
        color: "green",
        recommendations: [
          "Experiment with theme days",
          "Track productivity metrics",
          "Consider automation with Apple Shortcuts"
        ]
      };
    }
  };

  const saveAssessment = () => {
    const assessment = getScoreAssessment();
    const getAnswerText = (questionId, score) => {
      const question = questions.find(q => q.id === questionId);
      return question?.options.find(opt => opt.score === score)?.text || 'Not answered';
    };

    const content = `TIME BLOCKING ASSESSMENT RESULTS
Generated: ${new Date().toLocaleDateString()}

ASSESSMENT SCORE: ${totalScore}/10

DETAILED RESPONSES:
${questions.map(q => `${q.id}. ${q.question}: ${getAnswerText(q.id, answers[q.id])}`).join('\n')}

OVERALL ASSESSMENT: ${assessment.title}

RECOMMENDATIONS:
${assessment.recommendations.map(rec => `- ${rec}`).join('\n')}

Generated by Time Management Toolkit`;

    downloadFile('time-blocking-assessment.txt', content);
  };

  const tips = [
    {
      title: "üîÑ Use Repeating Events",
      text: "Set up recurring blocks for routine activities using the Repeat feature to save time."
    },
    {
      title: "üé® Color Coding",
      text: "Create different calendars for different work types and assign colors."
    },
    {
      title: "üì± Mobile Sync",
      text: "Ensure your blocks sync across all devices for on-the-go updates."
    },
    {
      title: "‚è∞ Time Boxing",
      text: "Set specific end times for tasks to create urgency and focus."
    }
  ];

  return (
    <div className="space-y-8">
      <div>
        <h2 className="text-3xl font-bold text-gray-900 mb-4">üìÖ Time Blocking Health Check</h2>
        <p className="text-lg text-gray-600">Evaluate how well your current Apple Calendar time blocking system is working.</p>
      </div>

      {/* Assessment Questions */}
      <div className="bg-gray-50 rounded-xl p-6">
        <h3 className="text-xl font-semibold mb-6">üîç Quick System Audit</h3>
        <p className="text-gray-600 mb-6">Answer these questions to see how your time blocking stacks up:</p>

        <div className="space-y-8">
          {questions.map((question) => (
            <div key={question.id} className="space-y-4">
              <h4 className="font-medium text-gray-900">
                {question.id}. {question.question}
              </h4>
              <div className="space-y-3">
                {question.options.map((option) => (
                  <button
                    key={option.score}
                    onClick={() => selectAnswer(question.id, option.score)}
                    className={`w-full p-4 text-left rounded-lg border-2 transition-all ${
                      answers[question.id] === option.score
                        ? option.score === 2 
                          ? 'border-green-500 bg-green-50'
                          : option.score === 1
                          ? 'border-yellow-500 bg-yellow-50'
                          : 'border-red-500 bg-red-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <span className="text-lg mr-3">{option.icon}</span>
                    {option.text}
                  </button>
                ))}
              </div>
            </div>
          ))}
        </div>

        {isComplete && (
          <div className="mt-8 flex justify-end">
            <button
              onClick={saveAssessment}
              className="px-6 py-3 border border-blue-500 text-blue-500 rounded-lg font-medium hover:bg-blue-50 transition-all"
            >
              üíæ Save Assessment
            </button>
          </div>
        )}
      </div>

      {/* Score Display */}
      {isComplete && (
        <div className="bg-white rounded-xl p-6 border-2 border-gray-200">
          <div className="text-center mb-6">
            <h3 className="text-2xl font-bold text-gray-900">Your Time Blocking Score</h3>
            <div className="text-4xl font-bold mt-2">
              <span className={`${
                totalScore <= 3 ? 'text-red-500' :
                totalScore <= 6 ? 'text-yellow-500' :
                'text-green-500'
              }`}>
                {totalScore}/10
              </span>
            </div>
          </div>

          {(() => {
            const assessment = getScoreAssessment();
            return (
              <div className={`rounded-lg p-6 ${
                assessment.color === 'red' ? 'bg-red-50 border-red-200' :
                assessment.color === 'yellow' ? 'bg-yellow-50 border-yellow-200' :
                'bg-green-50 border-green-200'
              } border-2`}>
                <h4 className={`text-xl font-semibold mb-4 ${
                  assessment.color === 'red' ? 'text-red-800' :
                  assessment.color === 'yellow' ? 'text-yellow-800' :
                  'text-green-800'
                }`}>
                  {assessment.title}
                </h4>
                <ul className={`space-y-2 ${
                  assessment.color === 'red' ? 'text-red-700' :
                  assessment.color === 'yellow' ? 'text-yellow-700' :
                  'text-green-700'
                }`}>
                  {assessment.recommendations.map((rec, index) => (
                    <li key={index}>‚Ä¢ {rec}</li>
                  ))}
                </ul>
              </div>
            );
          })()}
        </div>
      )}

      {/* Apple Calendar Tips */}
      <div>
        <h3 className="text-xl font-semibold mb-6">üçé Apple Calendar Tips</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {tips.map((tip, index) => (
            <div key={index} className="bg-white border-l-4 border-blue-400 rounded-lg p-6 shadow-sm">
              <h4 className="text-lg font-semibold text-gray-900 mb-3">{tip.title}</h4>
              <p className="text-gray-700">{tip.text}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Pro Tips */}
      <div className="bg-purple-50 border border-purple-200 rounded-xl p-6">
        <h4 className="text-lg font-semibold text-purple-800 mb-3">üöÄ Advanced Time Blocking Strategies</h4>
        <ul className="space-y-2 text-purple-700">
          <li>‚Ä¢ <strong>Theme Days:</strong> Assign different types of work to different days</li>
          <li>‚Ä¢ <strong>Energy Mapping:</strong> Schedule demanding tasks during your peak energy hours</li>
          <li>‚Ä¢ <strong>Transition Rituals:</strong> Create short routines between different types of work</li>
          <li>‚Ä¢ <strong>Buffer Blocks:</strong> Schedule "overflow" time for tasks that run long</li>
        </ul>
      </div>
    </div>
  );
};

export default TimeBlocking;